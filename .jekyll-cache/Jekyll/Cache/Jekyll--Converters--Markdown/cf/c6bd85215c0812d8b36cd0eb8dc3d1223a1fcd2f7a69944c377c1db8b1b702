I"?<p>When you write your React/ReactNative code for the first time, there are quite a number of tutorial that use lambda or arrow function within JSX.
It’s convenience, it is easy, and you don’t need to worry about <code class="language-plaintext highlighter-rouge">this</code>.</p>

<p>However, this practice can be considered bad and affect performance.
The reason behind it is due to how <code class="language-plaintext highlighter-rouge">render</code> function get called in React and the nature of lambda itself.</p>

<p>React component by default will re-render whenever its <code class="language-plaintext highlighter-rouge">state</code> changed.
Therefore, recreating the lambda every single time it render and put previous function into garbage collection.</p>

<p>There are 2 general solution for this problem.</p>

<h3 id="1-bind-the-method-in-constructor">1. Bind the method in constructor</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class AwesomeComponent extends Component {
    constructor(){
        super()
        this.doSomething = this.doSomething.bind(this)
    }

    doSomething(){
        // whatever you want to do here
    }

    render(){
        return(
            &lt;TouchableOpacity onPress={this.doSomething}&gt;
                &lt;Text&gt;Press Me&lt;/Text&gt;
            &lt;/TouchableOpacity&gt;
        )
    }

}
</code></pre></div></div>

<h3 id="2-define-your-arrow-function-as-a-class-property">2. Define your arrow function as a class property</h3>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>class AwesomeComponent extends Component {
    constructor(){
        super()
    }

    doSomething = ()=&gt;{
        // fill me in
    }

    render(){
        return(
           &lt;TouchableOpacity onPress={this.doSomething}&gt;
            &lt;Text&gt;Press Me Again&lt;/Text&gt;
           &lt;/TouchableOpacity&gt;
        )
    }
}

</code></pre></div></div>

<p>Quite easy solution that can improve your React/ReactNative performance.</p>
:ET