I"‰<p>Recently I found an interesting bug on my app. Whenever I pass an object which containt <code class="language-plaintext highlighter-rouge">NSManagedObject</code> subclass, at one point of time it will disappear from the memory. I was frustrated and naively change my implementation by passing the unique parameter of NSManagedObject subclass and fetch it from CoreData whenever it disappear. I was happy, things are working well, there was an increase of memory usage but everything run smoothly.</p>

<p>Yesterday I found the same issue again and finally able to uncover amusing mistery.</p>

<p>Aparrantely since <code class="language-plaintext highlighter-rouge">NSManagedObject</code> depend on <code class="language-plaintext highlighter-rouge">NSManagedObjectContext</code>, without the context you canâ€™t do any, and since the context and threading doesnâ€™t run well together, whenever the thread of context creation is killed by <strong>CoreData</strong>, the context disappear and your NSManagedObject will fault.</p>

<p>I believe itâ€™s my implementation default on multi threading on <strong>CoreData</strong> but at least now I know why and how to solve the issue. By ensuring your thread is still active and long live, you should have no issue with <code class="language-plaintext highlighter-rouge">NSManagedObjectContext</code>. Now I make sure I only use 2 different context, read and update, which is good enough for my apps.</p>

<p>Would love to explore more about multi threading on <strong>CoreData</strong>, perhaps there are more intersting stuff I can dig along. Itâ€™s an interesting time to live as mobile dev.</p>

<p>Till then,
Ciaosz</p>
:ET