I"… <p>Iâ€™ve been spending the last couple of months as mentor for iOS Developer bootcamp program at <a href="https://www.nextacademy.com/">NEXTAcademy</a>. Here are 6 advices, tips, tricks I told my students to improve their code.</p>

<h2 id="1-name-things-properly">1. Name things properly.</h2>

<p>You are not only write code for the machine, but also for other developer to read. Especially if you are working in a team. The rule of thumb is, the name of your class, variable, or function, <strong>should be self explanatory</strong>. People who read, should understand what it does directly.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example</span>
<span class="k">var</span> <span class="nv">name</span> <span class="o">=</span> <span class="s">"John"</span><span class="p">;</span> <span class="c1">// good variable name</span>
<span class="k">var</span> <span class="nv">x</span> <span class="o">=</span> <span class="s">"Max"</span> <span class="c1">// what is x??</span>

<span class="c1">// Other example</span>

<span class="k">var</span> <span class="nv">students</span> <span class="p">:</span> <span class="p">[</span><span class="kt">Student</span><span class="p">]</span> <span class="c1">// using plural form</span>
<span class="k">var</span> <span class="nv">student</span> <span class="p">:</span> <span class="p">[</span><span class="kt">Student</span><span class="p">]</span> <span class="c1">// so 'student' is many students or ???</span>
</code></pre></div></div>

<h2 id="2-one-function-should-only-do-one-thing">2. One function should only do one thing.</h2>

<p>This is the basic of <strong>Single Responsibility Principle</strong>. One function should only do one thing and one thing only. It should self explanatory, function name should reflect what it does.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">func</span> <span class="nf">displayAlert</span><span class="p">()</span> <span class="p">{</span>
  <span class="c1">// write code that will only display alert here</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="3-avoid-side-effect-when-using-function">3. Avoid side effect when using function.</h2>

<p>When writing a function, quite often you will change the state or the value of an object which declared outside function declaration, perhaps a variable you declare in your class. This often called <strong>side effect</strong>. Ideally you want to avoid side effect as much as possible. You can write a function that accept parameter and return a new value.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// Example</span>

<span class="kd">func</span> <span class="nf">viewDidLoad</span><span class="p">(){</span>
  <span class="k">super</span><span class="o">.</span><span class="nf">viewDidLoad</span><span class="p">()</span>

  <span class="n">students</span> <span class="o">=</span> <span class="nf">studentsFromJSONArray</span><span class="p">(</span><span class="n">jsonArray</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// ...somewhere down in your code</span>

<span class="kd">func</span> <span class="nf">studentsFromJSONArray</span><span class="p">(</span><span class="n">_</span> <span class="kt">JSONArray</span><span class="p">:</span> <span class="p">[[</span><span class="kt">String</span><span class="p">:</span><span class="kt">Any</span><span class="p">]])</span> <span class="o">-&gt;</span> <span class="p">[</span><span class="kt">Student</span><span class="p">]</span> <span class="p">{</span>
  <span class="c1">// create your student objects here</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="4-use-extension-to-separate-the-logic-or-protocol-implementation">4. Use extension to separate the logic or protocol implementation.</h2>

<p>Extension in swift, is meant to add functionality to the code that you donâ€™t own. However, I also like to use it to separate my code logic, especially protocol implementation. The good thing about it, once you get used to separate your logic, you might starting to see a pattern in your code and you can refactor it easily if you want to.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="kd">class</span> <span class="kt">ViewController</span> <span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
  <span class="c1">// write logic specific of your ViewController here</span>
<span class="p">}</span>

<span class="kd">extension</span> <span class="kt">ViewController</span><span class="p">:</span> <span class="kt">UITableViewDataSource</span> <span class="p">{</span>
  <span class="c1">// write all protocol implementation of UITableViewDataSource or function related to it in extension</span>
<span class="p">}</span>

</code></pre></div></div>

<h2 id="5-separate-business-logic-from-your-viewcontroller">5. Separate business logic from your ViewController</h2>

<p><strong>Modal View Controller (MVC)</strong> pattern is the first architecture pattern youâ€™ll learn when building iOS application. Itâ€™s great, however Apple tied the View and Controller together in UIViewController and its subclass. This without proper check can go out of control causing <strong>Massive-View-Controller</strong> instead. To solve this, I often take out my business logic to different class which is a plain object. I will end up with at least 2 classes : <strong>ViewController</strong> and <strong>Controller</strong>. ViewController only role is to accept input, pass it to Controller and displaying output. Therefor, your ViewController doesnâ€™t have any business logic at all. Your Controller is the one which has business logic, however, it doesnâ€™t have UIKit component at all, this will make your code more reusable.</p>

<div class="language-swift highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="c1">// AuthViewController.swift</span>
<span class="kd">class</span> <span class="kt">AuthViewController</span><span class="p">:</span> <span class="kt">UIViewController</span> <span class="p">{</span>
  <span class="c1">// UIViewController lifecycle, accepting input from view and displaying output</span>
  <span class="c1">// No business logic</span>
<span class="p">}</span>

<span class="c1">// AuthController.swift</span>
<span class="kd">class</span> <span class="kt">AuthController</span> <span class="p">{</span>
  <span class="c1">// only do business logic, no UI element</span>
  <span class="kd">func</span> <span class="nf">login</span><span class="p">(</span><span class="nv">username</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">password</span><span class="p">:</span> <span class="kt">String</span><span class="p">,</span> <span class="nv">completion</span><span class="p">:</span> <span class="p">(</span><span class="kt">Bool</span><span class="p">,</span> <span class="kt">Error</span><span class="p">?)</span> <span class="o">-&gt;</span> <span class="kt">Swift</span><span class="o">.</span><span class="kt">Void</span><span class="p">){</span>
    <span class="c1">//... implementation</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="6-as-vanilla-as-possible">6. As vanilla as possible</h2>

<p>I often encourage my students to be as vanilla as possible. It simply mean, do not include library if itâ€™s not required. Example, if you want to do simple network request, itâ€™s better to create a class by your own instead of using library such as <code class="language-plaintext highlighter-rouge">Alamofire</code>.</p>

<h2 id="conclusion">Conclusion</h2>

<p>Those are my personal favorites. Itâ€™s easy to implement and will lead to a better code almost instantly. It doesnâ€™t change the structure too much so you can directly refactor your code.</p>

<p>I personally believe a better code is something readable. Youâ€™ll need that readability if you work again on the codebase after couple of months. It helps on context switching.</p>

<p>Cheers</p>
:ET